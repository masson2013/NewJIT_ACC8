// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module jit_blackbox (
        ap_clk,
        ap_rst_n,
        sI1_V_TDATA,
        sI1_V_TVALID,
        sI1_V_TREADY,
        sI2_V_TDATA,
        sI2_V_TVALID,
        sI2_V_TREADY,
        mO1_V_TDATA,
        mO1_V_TVALID,
        mO1_V_TREADY,
        arg1_V,
        arg2_V,
        arg3_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st5_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] sI1_V_TDATA;
input   sI1_V_TVALID;
output   sI1_V_TREADY;
input  [31:0] sI2_V_TDATA;
input   sI2_V_TVALID;
output   sI2_V_TREADY;
output  [31:0] mO1_V_TDATA;
output   mO1_V_TVALID;
input   mO1_V_TREADY;
input  [15:0] arg1_V;
input  [15:0] arg2_V;
input  [15:0] arg3_V;

reg sI1_V_TREADY;
reg sI2_V_TREADY;
reg mO1_V_TVALID;
reg    ap_rst_n_inv;
reg   [31:0] i_op_assign_reg_87;
wire   [31:0] size_fu_98_p3;
reg   [31:0] size_reg_127;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_34;
wire   [31:0] tmp_fu_106_p1;
reg   [31:0] tmp_reg_132;
wire   [0:0] tmp_1_fu_110_p2;
reg   [0:0] tmp_1_reg_137;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_46;
reg    ap_sig_bdd_56;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_tmp_1_reg_137_pp0_it1;
reg    ap_sig_ioackin_mO1_V_TREADY;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
wire   [31:0] i_fu_122_p2;
wire  signed [31:0] grp_fu_115_p2;
reg    ap_reg_ioackin_mO1_V_TREADY = 1'b0;
wire  signed [31:0] grp_fu_115_p0;
wire  signed [31:0] grp_fu_115_p1;
reg    grp_fu_115_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_sig_bdd_148;
reg    ap_sig_bdd_147;


acc_vmul_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
acc_vmul_mul_32s_32s_32_3_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_115_p0 ),
    .din1( grp_fu_115_p1 ),
    .ce( grp_fu_115_ce ),
    .dout( grp_fu_115_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_mO1_V_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_mO1_V_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mO1_V_TREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_147) begin
            if (~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
                ap_reg_ioackin_mO1_V_TREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_148) begin
                ap_reg_ioackin_mO1_V_TREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_1_fu_110_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_110_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_1_fu_110_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_110_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        i_op_assign_reg_87 <= i_fu_122_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        i_op_assign_reg_87 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        ap_reg_ppstg_tmp_1_reg_137_pp0_it1 <= tmp_1_reg_137;
        tmp_1_reg_137 <= tmp_1_fu_110_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        size_reg_127 <= size_fu_98_p3;
        tmp_reg_132[15 : 0] <= tmp_fu_106_p1[15 : 0];
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_46)
begin
    if (ap_sig_bdd_46) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_34)
begin
    if (ap_sig_bdd_34) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_mO1_V_TREADY assign process. ///
always @ (mO1_V_TREADY or ap_reg_ioackin_mO1_V_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mO1_V_TREADY)) begin
        ap_sig_ioackin_mO1_V_TREADY = mO1_V_TREADY;
    end else begin
        ap_sig_ioackin_mO1_V_TREADY = ap_const_logic_1;
    end
end

/// grp_fu_115_ce assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_tmp_1_reg_137_pp0_it1 or ap_sig_ioackin_mO1_V_TREADY or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        grp_fu_115_ce = ap_const_logic_1;
    end else begin
        grp_fu_115_ce = ap_const_logic_0;
    end
end

/// mO1_V_TVALID assign process. ///
always @ (ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_tmp_1_reg_137_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ioackin_mO1_V_TREADY)
begin
    if ((~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_0 == ap_reg_ioackin_mO1_V_TREADY))) begin
        mO1_V_TVALID = ap_const_logic_1;
    end else begin
        mO1_V_TVALID = ap_const_logic_0;
    end
end

/// sI1_V_TREADY assign process. ///
always @ (tmp_1_fu_110_p2 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_tmp_1_reg_137_pp0_it1 or ap_sig_ioackin_mO1_V_TREADY or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_110_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        sI1_V_TREADY = ap_const_logic_1;
    end else begin
        sI1_V_TREADY = ap_const_logic_0;
    end
end

/// sI2_V_TREADY assign process. ///
always @ (tmp_1_fu_110_p2 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_tmp_1_reg_137_pp0_it1 or ap_sig_ioackin_mO1_V_TREADY or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_110_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        sI2_V_TREADY = ap_const_logic_1;
    end else begin
        sI2_V_TREADY = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or tmp_1_fu_110_p2 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_tmp_1_reg_137_pp0_it1 or ap_sig_ioackin_mO1_V_TREADY or ap_reg_ppiten_pp0_it2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((tmp_1_fu_110_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((tmp_1_fu_110_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st5_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st5_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_147 assign process. ///
always @ (ap_reg_ppstg_tmp_1_reg_137_pp0_it1 or ap_reg_ppiten_pp0_it2)
begin
    ap_sig_bdd_147 = (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_1_reg_137_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2));
end

/// ap_sig_bdd_148 assign process. ///
always @ (mO1_V_TREADY or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0)
begin
    ap_sig_bdd_148 = (~(ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_1 == mO1_V_TREADY));
end

/// ap_sig_bdd_34 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_34 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_46 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_46 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_56 assign process. ///
always @ (sI1_V_TVALID or sI2_V_TVALID or tmp_1_fu_110_p2)
begin
    ap_sig_bdd_56 = (((sI1_V_TVALID == ap_const_logic_0) & ~(tmp_1_fu_110_p2 == ap_const_lv1_0)) | (~(tmp_1_fu_110_p2 == ap_const_lv1_0) & (sI2_V_TVALID == ap_const_logic_0)));
end
assign grp_fu_115_p0 = sI2_V_TDATA;
assign grp_fu_115_p1 = sI1_V_TDATA;
assign i_fu_122_p2 = (tmp_reg_132 + i_op_assign_reg_87);
assign mO1_V_TDATA = grp_fu_115_p2;
assign size_fu_98_p3 = {{arg1_V}, {arg2_V}};
assign tmp_1_fu_110_p2 = (i_op_assign_reg_87 < size_reg_127? 1'b1: 1'b0);
assign tmp_fu_106_p1 = arg3_V;
always @ (posedge ap_clk)
begin
    tmp_reg_132[31:16] <= 16'b0000000000000000;
end



endmodule //acc_vmul

