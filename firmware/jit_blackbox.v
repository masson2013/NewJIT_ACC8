// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="acc_vadd,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.210000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=112}" *)

module jit_blackbox (
        ap_clk,
        ap_rst_n,
        sI1_V_TDATA,
        sI1_V_TVALID,
        sI1_V_TREADY,
        sI2_V_TDATA,
        sI2_V_TVALID,
        sI2_V_TREADY,
        mO1_V_TDATA,
        mO1_V_TVALID,
        mO1_V_TREADY,
        arg1_V,
        arg2_V,
        arg3_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] sI1_V_TDATA;
input   sI1_V_TVALID;
output   sI1_V_TREADY;
input  [31:0] sI2_V_TDATA;
input   sI2_V_TVALID;
output   sI2_V_TREADY;
output  [31:0] mO1_V_TDATA;
output   mO1_V_TVALID;
input   mO1_V_TREADY;
input  [15:0] arg1_V;
input  [15:0] arg2_V;
input  [15:0] arg3_V;

reg sI1_V_TREADY;
reg sI2_V_TREADY;
reg mO1_V_TVALID;
reg    ap_rst_n_inv;
reg   [31:0] i_op_assign_reg_85;
wire   [31:0] size_fu_96_p3;
reg   [31:0] size_reg_124;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_34;
wire   [31:0] tmp_fu_104_p1;
reg   [31:0] tmp_reg_129;
wire   [0:0] tmp_1_fu_108_p2;
reg   [0:0] tmp_1_reg_134;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_46;
reg    ap_sig_bdd_56;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_ioackin_mO1_V_TREADY;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [31:0] tmp_2_fu_113_p2;
reg   [31:0] tmp_2_reg_138;
wire   [31:0] i_fu_119_p2;
reg    ap_reg_ioackin_mO1_V_TREADY = 1'b0;
reg   [2:0] ap_NS_fsm;
reg    ap_sig_bdd_130;
reg    ap_sig_bdd_129;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_mO1_V_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_mO1_V_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mO1_V_TREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_129) begin
            if (~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_reg_ioackin_mO1_V_TREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_130) begin
                ap_reg_ioackin_mO1_V_TREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_1_fu_108_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_108_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (tmp_1_fu_108_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_108_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        i_op_assign_reg_85 <= i_fu_119_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        i_op_assign_reg_85 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        size_reg_124 <= size_fu_96_p3;
        tmp_reg_129[15 : 0] <= tmp_fu_104_p1[15 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp_1_reg_134 <= tmp_1_fu_108_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_108_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp_2_reg_138 <= tmp_2_fu_113_p2;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_46)
begin
    if (ap_sig_bdd_46) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_34)
begin
    if (ap_sig_bdd_34) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_mO1_V_TREADY assign process. ///
always @ (mO1_V_TREADY or ap_reg_ioackin_mO1_V_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mO1_V_TREADY)) begin
        ap_sig_ioackin_mO1_V_TREADY = mO1_V_TREADY;
    end else begin
        ap_sig_ioackin_mO1_V_TREADY = ap_const_logic_1;
    end
end

/// mO1_V_TVALID assign process. ///
always @ (tmp_1_reg_134 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ioackin_mO1_V_TREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_0 == ap_reg_ioackin_mO1_V_TREADY))) begin
        mO1_V_TVALID = ap_const_logic_1;
    end else begin
        mO1_V_TVALID = ap_const_logic_0;
    end
end

/// sI1_V_TREADY assign process. ///
always @ (tmp_1_fu_108_p2 or tmp_1_reg_134 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_sig_ioackin_mO1_V_TREADY or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_108_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        sI1_V_TREADY = ap_const_logic_1;
    end else begin
        sI1_V_TREADY = ap_const_logic_0;
    end
end

/// sI2_V_TREADY assign process. ///
always @ (tmp_1_fu_108_p2 or tmp_1_reg_134 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_sig_ioackin_mO1_V_TREADY or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_fu_108_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        sI2_V_TREADY = ap_const_logic_1;
    end else begin
        sI2_V_TREADY = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or tmp_1_fu_108_p2 or tmp_1_reg_134 or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0 or ap_sig_ioackin_mO1_V_TREADY or ap_reg_ppiten_pp0_it1)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 :
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
        end
        ap_ST_pp0_stg0_fsm_1 :
        begin
            if (~((tmp_1_fu_108_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((tmp_1_fu_108_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | (~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_mO1_V_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st4_fsm_2 :
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default :
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_129 assign process. ///
always @ (tmp_1_reg_134 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    ap_sig_bdd_129 = ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_1_reg_134 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1));
end

/// ap_sig_bdd_130 assign process. ///
always @ (mO1_V_TREADY or ap_sig_bdd_56 or ap_reg_ppiten_pp0_it0)
begin
    ap_sig_bdd_130 = (~(ap_sig_bdd_56 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_1 == mO1_V_TREADY));
end

/// ap_sig_bdd_34 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_34 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_46 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_46 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_56 assign process. ///
always @ (sI1_V_TVALID or sI2_V_TVALID or tmp_1_fu_108_p2)
begin
    ap_sig_bdd_56 = (((sI1_V_TVALID == ap_const_logic_0) & ~(tmp_1_fu_108_p2 == ap_const_lv1_0)) | (~(tmp_1_fu_108_p2 == ap_const_lv1_0) & (sI2_V_TVALID == ap_const_logic_0)));
end
assign i_fu_119_p2 = (tmp_reg_129 + i_op_assign_reg_85);
assign mO1_V_TDATA = tmp_2_reg_138;
assign size_fu_96_p3 = {{arg1_V}, {arg2_V}};
assign tmp_1_fu_108_p2 = (i_op_assign_reg_85 < size_reg_124? 1'b1: 1'b0);
assign tmp_2_fu_113_p2 = (sI2_V_TDATA + sI1_V_TDATA);
assign tmp_fu_104_p1 = arg3_V;
always @ (posedge ap_clk)
begin
    tmp_reg_129[31:16] <= 16'b0000000000000000;
end



endmodule //acc_vadd

